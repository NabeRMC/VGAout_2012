/*****************************************************************************
    System Name : BadApple 2010
    File Name   : nabe_common.h
    Content     : 
    Version     : 0.0
    CPU board   : Arduino Duemilanove
    Compiler    : 
    History     :2010/08/03
*****************************************************************************/
/*----------------------------------------------------------------------------
;  Copyleft Nabe_RMC
;---------------------------------------------------------------------------*/
#ifndef COMMON_H
#define COMMON_H

#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>

/*==========================================================================*/
/* typedef                                                                  */
/*==========================================================================*/
typedef signed   char       SB;             /* signed    8bit               */
typedef unsigned char       UB;             /* unsigned  8bit               */
typedef signed   short      SH;             /* siged    16bit               */
typedef unsigned short      UH;             /* unsigned 16bit               */
typedef signed   long       SW;             /* signed   32bit               */
typedef unsigned long       UW;             /* unsined  32bit               */
typedef unsigned char       BL;             /* boolean                      */

/*==========================================================================*/
/* defines                                                                  */
/*==========================================================================*/
#define ON      1
#define OFF     0
#define ERROR   (-1)
#define EOF	(-1)

#endif  /* COOMON_H */



/*****************************************************************************
	System Name	: xxx
	File Name	: Codeing_Gudelines.txt
	Content		: 
	Version		: 0.0
	CPU board	: xxx
	Compiler	: xxx
	OS			: xxx
	Programmer	: Meow
	Copyleft (c)2008 Meow
	History		:2008/09/xx
*****************************************************************************/

/*============================================================================

  【参考】
  	●Interface 2008年7月号「特集 書ける、動く！楽しいCプログラミング」
		128頁 Appendix2「本特集におけるコーディングガイドライン」
	
	●【改定版】組込みソフトウェア開発向け コーディング作法ガイド[C言語版]
		独立行政法人 情報処理推進機構 ソフトウェア・エンジニアリング・センター
		[SEC]
	
	●組込み現場のCプログラミング 標準コーディングガイドライン
		福岡知的クラスタ(第Ⅰ期)組込みソフト開発プロジェクト
		技術評論社
		[CGL]
	
	●組込み現場のC++プログラミング
		高木信尚
		技術評論社
		[CPP]
	--------------------------------------------------------------------------
	1)変数の型
	  ・typedefはToppersを参考にする
		ただし符号無しがUB、UH、UWなので符号無しも2文字になるように
		B → SB、H → SH、W → SW とした。
	  
	  ・intは基本的には処理系依存なのでintは使用しないことにする。
	  	→この考え方は良くないと思われる。何故intが使われる?
	  	→そのマイコンに最適な型とされるから？
		（ちなみにC99ではshort? 要確認)
	  ・boolは有効と思われるので使用することにする。
	    メモリ使用量削減することとし、BLはunsigned charとする。
		
	[CPP 1.4.2]
	  ・C++の関数をCから呼び出すときのbool型について
	  C99では_Bool型がサポートされ、<stdbool.h>ヘッダではbootといマクロが
	  定義されますが、できれば使用は避けた方が無難です。C++のboolとC99
	  の_Bool型の互換性は規格上保証されないことはもちろん、互換性が
	  あるだろうと推測することさえ困難だからです。
		
	2)プリフィクス
		void	-> v_
		strut	-> s_
		
	  ・ポインタ変数は上記プリフィクスの前にpを付ける。
	  ・グローバル変数は上記プリフィクスの前にgを付ける。
		
	3)命名規則
	  関数名 モジュール名_プリフィクス・動詞・名詞
	  変数名 プリフィクス・変数名

	[SEC M4.4.1]ファイル内の記述内容と記述
		(1) file headder comment
		(2) headder system
		(3) headder user
		(4) #define macro
		(5) #define macro functin
		(6) typedef
		(7) enum
		(8) struct/uinon
		(9) extern
		(10)prototype
		
	[SEC M4.4.6]ヘッダフィルは重複取り込みに耐えうる作りとする。
		#ifndef xxx
	??? extern 何故これでよい ???
		
	[SEC M1.5.2]ゼロとの比較は明示的にする。
	★ 適合if(x !=0 )	不適合if(x) とあるが
	意図的にゼロ以外であることの判断であるならばアリか？
	論理の比較であるならばif(x)の方が良い[CGL 21]
	
	[SEC M4.5.1]	(1)関数プロトタイプ宣言では、すべての引数に名前をつけない。
					   型だけとする
					(2)関数プロトタイプ宣言では、すべての引数に名前をつける。
					   引数の型、名前、戻り方は、関数定義とリテラル同じとする。
	
	---------------------------------------------------------------
	[CGL 21]0との比較や代入は数値の0との場合だけにする。
	
	[CGL 36]複数のファイルで共有する宣言は1箇所にまとめる。
		・同じ宣言を2箇所以上でしない。
	★1関数/1ファイルの方針とした場合どーするのが最適か？
		
	[CGL 45]複合語の名前
		・対象を先にし、それを限定するものや修飾するものを後にする。
		・単語の結合を「_」で表すか大文字にする
		
	[CGL 48]真偽を表すものは真偽が容易にわかる名前にする。
		・isXX
		
	[CGL 50]関数の名前
		・操作タイプの関数名は「動詞+対象」 どうするなにを
			つなぎは？
			1)対象の先頭文字を大文字してつなぐ
			2)'_'でつなぐ
			
		・演算タイプの関数名は「なにを返す」のかを明確に

============================================================================*/

